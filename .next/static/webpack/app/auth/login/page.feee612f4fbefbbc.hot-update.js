"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/auth/login/page",{

/***/ "(app-pages-browser)/./services/api.ts":
/*!*************************!*\
  !*** ./services/api.ts ***!
  \*************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authApi: () => (/* binding */ authApi),\n/* harmony export */   batchItemsApi: () => (/* binding */ batchItemsApi),\n/* harmony export */   batchesApi: () => (/* binding */ batchesApi),\n/* harmony export */   brandsApi: () => (/* binding */ brandsApi),\n/* harmony export */   categoriesApi: () => (/* binding */ categoriesApi),\n/* harmony export */   currenciesApi: () => (/* binding */ currenciesApi),\n/* harmony export */   inventoryApi: () => (/* binding */ inventoryApi),\n/* harmony export */   jobsApi: () => (/* binding */ jobsApi),\n/* harmony export */   permissionsApi: () => (/* binding */ permissionsApi),\n/* harmony export */   productTypesApi: () => (/* binding */ productTypesApi),\n/* harmony export */   rolesApi: () => (/* binding */ rolesApi),\n/* harmony export */   usersApi: () => (/* binding */ usersApi)\n/* harmony export */ });\n// This will be easily changeable to your Laravel API URL\nconst API_BASE_URL = 'http://localhost:8000/api';\n// Mock data for development\nconst mockUsers = [\n    {\n        id: '1',\n        email: 'admin@example.com',\n        name: 'Admin User',\n        role: 'admin',\n        createdAt: '2024-01-01',\n        updatedAt: '2024-01-01'\n    }\n];\nconst mockBrands = [\n    {\n        id: '1',\n        name: 'Apple',\n        description: 'Technology brand',\n        createdAt: '2024-01-01',\n        updatedAt: '2024-01-01'\n    },\n    {\n        id: '2',\n        name: 'Samsung',\n        description: 'Electronics manufacturer',\n        createdAt: '2024-01-01',\n        updatedAt: '2024-01-01'\n    },\n    {\n        id: '3',\n        name: 'Nike',\n        description: 'Sportswear brand',\n        createdAt: '2024-01-01',\n        updatedAt: '2024-01-01'\n    }\n];\nconst mockCategories = [\n    {\n        id: '1',\n        name: 'Electronics',\n        createdAt: '2024-01-01',\n        updatedAt: '2024-01-01'\n    },\n    {\n        id: '2',\n        name: 'Smartphones',\n        parentId: '1',\n        createdAt: '2024-01-01',\n        updatedAt: '2024-01-01'\n    },\n    {\n        id: '3',\n        name: 'Laptops',\n        parentId: '1',\n        createdAt: '2024-01-01',\n        updatedAt: '2024-01-01'\n    },\n    {\n        id: '4',\n        name: 'Clothing',\n        createdAt: '2024-01-01',\n        updatedAt: '2024-01-01'\n    },\n    {\n        id: '5',\n        name: 'Shoes',\n        parentId: '4',\n        createdAt: '2024-01-01',\n        updatedAt: '2024-01-01'\n    }\n];\nconst mockProductTypes = [\n    {\n        id: '1',\n        name: 'Physical Product',\n        description: 'Tangible items that require shipping',\n        attributes: {\n            requiresShipping: true,\n            trackable: true\n        },\n        createdAt: '2024-01-01',\n        updatedAt: '2024-01-01'\n    },\n    {\n        id: '2',\n        name: 'Digital Product',\n        description: 'Digital downloads or services',\n        attributes: {\n            requiresShipping: false,\n            downloadable: true\n        },\n        createdAt: '2024-01-01',\n        updatedAt: '2024-01-01'\n    }\n];\nconst mockInventoryItems = [\n    {\n        id: '1',\n        sku: 'APL-IPH15-BLK',\n        quantity: 150,\n        cost: 800,\n        retailPrice: 999,\n        orientalPrice: 920,\n        brandId: '1',\n        categoryId: '2',\n        productTypeId: '1',\n        warehouse: 'Main Warehouse',\n        weight: 0.2,\n        dimensions: {\n            length: 15,\n            width: 7,\n            height: 1\n        },\n        courier: 'DHL',\n        assembly: false,\n        dynamicFeatures: {\n            color: 'Black',\n            storage: '128GB'\n        },\n        createdAt: '2024-01-01',\n        updatedAt: '2024-01-01'\n    },\n    {\n        id: '2',\n        sku: 'SAM-GAL24-WHT',\n        quantity: 75,\n        cost: 700,\n        retailPrice: 899,\n        orientalPrice: 850,\n        brandId: '2',\n        categoryId: '2',\n        productTypeId: '1',\n        warehouse: 'Secondary Warehouse',\n        weight: 0.19,\n        dimensions: {\n            length: 14,\n            width: 6.8,\n            height: 0.8\n        },\n        courier: 'FedEx',\n        assembly: false,\n        dynamicFeatures: {\n            color: 'White',\n            storage: '256GB'\n        },\n        createdAt: '2024-01-01',\n        updatedAt: '2024-01-01'\n    }\n];\nconst mockJobs = [];\n// Mock data for user management\nconst mockPermissions = [\n    // Inventory permissions\n    {\n        id: '1',\n        name: 'inventory.create',\n        module: 'inventory',\n        action: 'create',\n        description: 'Create inventory items'\n    },\n    {\n        id: '2',\n        name: 'inventory.read',\n        module: 'inventory',\n        action: 'read',\n        description: 'View inventory items'\n    },\n    {\n        id: '3',\n        name: 'inventory.update',\n        module: 'inventory',\n        action: 'update',\n        description: 'Update inventory items'\n    },\n    {\n        id: '4',\n        name: 'inventory.delete',\n        module: 'inventory',\n        action: 'delete',\n        description: 'Delete inventory items'\n    },\n    {\n        id: '5',\n        name: 'inventory.import',\n        module: 'inventory',\n        action: 'import',\n        description: 'Import inventory data'\n    },\n    {\n        id: '6',\n        name: 'inventory.export',\n        module: 'inventory',\n        action: 'export',\n        description: 'Export inventory data'\n    },\n    // Brands permissions\n    {\n        id: '7',\n        name: 'brands.create',\n        module: 'brands',\n        action: 'create',\n        description: 'Create brands'\n    },\n    {\n        id: '8',\n        name: 'brands.read',\n        module: 'brands',\n        action: 'read',\n        description: 'View brands'\n    },\n    {\n        id: '9',\n        name: 'brands.update',\n        module: 'brands',\n        action: 'update',\n        description: 'Update brands'\n    },\n    {\n        id: '10',\n        name: 'brands.delete',\n        module: 'brands',\n        action: 'delete',\n        description: 'Delete brands'\n    },\n    // Categories permissions\n    {\n        id: '11',\n        name: 'categories.create',\n        module: 'categories',\n        action: 'create',\n        description: 'Create categories'\n    },\n    {\n        id: '12',\n        name: 'categories.read',\n        module: 'categories',\n        action: 'read',\n        description: 'View categories'\n    },\n    {\n        id: '13',\n        name: 'categories.update',\n        module: 'categories',\n        action: 'update',\n        description: 'Update categories'\n    },\n    {\n        id: '14',\n        name: 'categories.delete',\n        module: 'categories',\n        action: 'delete',\n        description: 'Delete categories'\n    },\n    // Batches permissions\n    {\n        id: '15',\n        name: 'batches.create',\n        module: 'batches',\n        action: 'create',\n        description: 'Create batches'\n    },\n    {\n        id: '16',\n        name: 'batches.read',\n        module: 'batches',\n        action: 'read',\n        description: 'View batches'\n    },\n    {\n        id: '17',\n        name: 'batches.update',\n        module: 'batches',\n        action: 'update',\n        description: 'Update batches'\n    },\n    {\n        id: '18',\n        name: 'batches.delete',\n        module: 'batches',\n        action: 'delete',\n        description: 'Delete batches'\n    },\n    // Users permissions\n    {\n        id: '19',\n        name: 'users.create',\n        module: 'users',\n        action: 'create',\n        description: 'Create users'\n    },\n    {\n        id: '20',\n        name: 'users.read',\n        module: 'users',\n        action: 'read',\n        description: 'View users'\n    },\n    {\n        id: '21',\n        name: 'users.update',\n        module: 'users',\n        action: 'update',\n        description: 'Update users'\n    },\n    {\n        id: '22',\n        name: 'users.delete',\n        module: 'users',\n        action: 'delete',\n        description: 'Delete users'\n    }\n];\nconst mockRoles = [\n    {\n        id: '1',\n        name: 'Owner',\n        description: 'Full access to all features',\n        permissions: mockPermissions,\n        isSystem: true,\n        createdAt: '2024-01-01',\n        updatedAt: '2024-01-01'\n    },\n    {\n        id: '2',\n        name: 'Admin',\n        description: 'Administrative access with most permissions',\n        permissions: mockPermissions.filter((p)=>![\n                'users.delete'\n            ].includes(p.name)),\n        isSystem: true,\n        createdAt: '2024-01-01',\n        updatedAt: '2024-01-01'\n    },\n    {\n        id: '3',\n        name: 'Manager',\n        description: 'Inventory and batch management',\n        permissions: mockPermissions.filter((p)=>[\n                'inventory',\n                'brands',\n                'categories',\n                'batches'\n            ].includes(p.module)),\n        isSystem: false,\n        createdAt: '2024-01-01',\n        updatedAt: '2024-01-01'\n    },\n    {\n        id: '4',\n        name: 'Viewer',\n        description: 'Read-only access',\n        permissions: mockPermissions.filter((p)=>p.action === 'read'),\n        isSystem: false,\n        createdAt: '2024-01-01',\n        updatedAt: '2024-01-01'\n    }\n];\nconst mockCurrencies = [\n    {\n        code: 'SGD',\n        name: 'Singapore Dollar',\n        symbol: 'S$',\n        rate: 1.0\n    },\n    {\n        code: 'USD',\n        name: 'US Dollar',\n        symbol: '$',\n        rate: 0.74\n    },\n    {\n        code: 'EUR',\n        name: 'Euro',\n        symbol: '€',\n        rate: 0.68\n    },\n    {\n        code: 'GBP',\n        name: 'British Pound',\n        symbol: '£',\n        rate: 0.59\n    },\n    {\n        code: 'JPY',\n        name: 'Japanese Yen',\n        symbol: '¥',\n        rate: 109.85\n    },\n    {\n        code: 'CNY',\n        name: 'Chinese Yuan',\n        symbol: '¥',\n        rate: 5.32\n    }\n];\nconst mockBatches = [\n    {\n        id: '1',\n        shopId: '1',\n        containerNumber: 'CONT-2024-001',\n        eta: '2024-02-15',\n        arrivalDate: '2024-02-14',\n        status: 'completed',\n        notes: 'Electronics shipment from China',\n        totalValue: 25000,\n        itemsCount: 150,\n        createdBy: '1',\n        createdAt: '2024-01-15',\n        updatedAt: '2024-02-14'\n    },\n    {\n        id: '2',\n        shopId: '1',\n        containerNumber: 'CONT-2024-002',\n        eta: '2024-03-01',\n        status: 'in_transit',\n        notes: 'Fashion items from Vietnam',\n        totalValue: 18500,\n        itemsCount: 200,\n        createdBy: '1',\n        createdAt: '2024-02-01',\n        updatedAt: '2024-02-01'\n    }\n];\nconst mockBatchItems = [\n    {\n        id: '1',\n        batchId: '1',\n        inventoryItemId: '1',\n        quantity: 50,\n        cost: 600,\n        currency: 'USD',\n        sgdCost: 810.81,\n        createdAt: '2024-01-15',\n        updatedAt: '2024-01-15'\n    },\n    {\n        id: '2',\n        batchId: '1',\n        inventoryItemId: '2',\n        quantity: 30,\n        cost: 500,\n        currency: 'USD',\n        sgdCost: 675.68,\n        createdAt: '2024-01-15',\n        updatedAt: '2024-01-15'\n    }\n];\n// Simulate API delay\nconst delay = (ms)=>new Promise((resolve)=>setTimeout(resolve, ms));\n// Auth API\nconst authApi = {\n    async login (credentials) {\n        await delay(800);\n        const user = mockUsers.find((u)=>u.email === credentials.email);\n        if (!user || credentials.password !== 'password') {\n            throw new Error('Invalid credentials');\n        }\n        return {\n            user,\n            token: 'mock-jwt-token-' + Date.now()\n        };\n    },\n    async register (data) {\n        await delay(1000);\n        if (mockUsers.find((u)=>u.email === data.email)) {\n            throw new Error('Email already exists');\n        }\n        const user = {\n            id: Date.now().toString(),\n            email: data.email,\n            name: data.name,\n            role: 'user',\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n        };\n        mockUsers.push(user);\n        return {\n            user,\n            token: 'mock-jwt-token-' + Date.now()\n        };\n    },\n    async forgotPassword (data) {\n        await delay(1200);\n        return {\n            message: 'Password reset email sent successfully'\n        };\n    },\n    async logout () {\n        await delay(300);\n    },\n    async getCurrentUser () {\n        await delay(500);\n        return mockUsers[0]; // Return mock user\n    }\n};\n// Brands API\nconst brandsApi = {\n    async getAll () {\n        await delay(300);\n        return [\n            ...mockBrands\n        ];\n    },\n    async getById (id) {\n        await delay(300);\n        const brand = mockBrands.find((b)=>b.id === id);\n        if (!brand) throw new Error('Brand not found');\n        return brand;\n    },\n    async create (data) {\n        await delay(500);\n        const brand = {\n            ...data,\n            id: Date.now().toString(),\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n        };\n        mockBrands.push(brand);\n        return brand;\n    },\n    async update (id, data) {\n        await delay(500);\n        const index = mockBrands.findIndex((b)=>b.id === id);\n        if (index === -1) throw new Error('Brand not found');\n        mockBrands[index] = {\n            ...mockBrands[index],\n            ...data,\n            updatedAt: new Date().toISOString()\n        };\n        return mockBrands[index];\n    },\n    async delete (id) {\n        await delay(300);\n        const index = mockBrands.findIndex((b)=>b.id === id);\n        if (index === -1) throw new Error('Brand not found');\n        mockBrands.splice(index, 1);\n    }\n};\n// Categories API\nconst categoriesApi = {\n    async getAll () {\n        await delay(300);\n        return buildCategoryTree([\n            ...mockCategories\n        ]);\n    },\n    async getById (id) {\n        await delay(300);\n        const category = mockCategories.find((c)=>c.id === id);\n        if (!category) throw new Error('Category not found');\n        return category;\n    },\n    async create (data) {\n        await delay(500);\n        const category = {\n            ...data,\n            id: Date.now().toString(),\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n        };\n        mockCategories.push(category);\n        return category;\n    },\n    async update (id, data) {\n        await delay(500);\n        const index = mockCategories.findIndex((c)=>c.id === id);\n        if (index === -1) throw new Error('Category not found');\n        mockCategories[index] = {\n            ...mockCategories[index],\n            ...data,\n            updatedAt: new Date().toISOString()\n        };\n        return mockCategories[index];\n    },\n    async delete (id) {\n        await delay(300);\n        const index = mockCategories.findIndex((c)=>c.id === id);\n        if (index === -1) throw new Error('Category not found');\n        mockCategories.splice(index, 1);\n    }\n};\n// Product Types API\nconst productTypesApi = {\n    async getAll () {\n        await delay(300);\n        return [\n            ...mockProductTypes\n        ];\n    },\n    async getById (id) {\n        await delay(300);\n        const productType = mockProductTypes.find((pt)=>pt.id === id);\n        if (!productType) throw new Error('Product type not found');\n        return productType;\n    },\n    async create (data) {\n        await delay(500);\n        const productType = {\n            ...data,\n            id: Date.now().toString(),\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n        };\n        mockProductTypes.push(productType);\n        return productType;\n    },\n    async update (id, data) {\n        await delay(500);\n        const index = mockProductTypes.findIndex((pt)=>pt.id === id);\n        if (index === -1) throw new Error('Product type not found');\n        mockProductTypes[index] = {\n            ...mockProductTypes[index],\n            ...data,\n            updatedAt: new Date().toISOString()\n        };\n        return mockProductTypes[index];\n    },\n    async delete (id) {\n        await delay(300);\n        const index = mockProductTypes.findIndex((pt)=>pt.id === id);\n        if (index === -1) throw new Error('Product type not found');\n        mockProductTypes.splice(index, 1);\n    }\n};\n// Inventory API\nconst inventoryApi = {\n    async getAll () {\n        let filters = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        await delay(500);\n        let filteredItems = [\n            ...mockInventoryItems\n        ];\n        // Apply search filter\n        if (filters.search) {\n            const search = filters.search.toLowerCase();\n            filteredItems = filteredItems.filter((item)=>item.sku.toLowerCase().includes(search) || item.warehouse.toLowerCase().includes(search));\n        }\n        // Apply brand filter\n        if (filters.brandId) {\n            filteredItems = filteredItems.filter((item)=>item.brandId === filters.brandId);\n        }\n        // Apply category filter\n        if (filters.categoryId) {\n            filteredItems = filteredItems.filter((item)=>item.categoryId === filters.categoryId);\n        }\n        // Apply product type filter\n        if (filters.productTypeId) {\n            filteredItems = filteredItems.filter((item)=>item.productTypeId === filters.productTypeId);\n        }\n        // Apply warehouse filter\n        if (filters.warehouse) {\n            filteredItems = filteredItems.filter((item)=>item.warehouse === filters.warehouse);\n        }\n        // Apply sorting\n        if (filters.sortBy) {\n            filteredItems.sort((a, b)=>{\n                const aVal = a[filters.sortBy];\n                const bVal = b[filters.sortBy];\n                if (filters.sortOrder === 'desc') {\n                    return bVal > aVal ? 1 : -1;\n                }\n                return aVal > bVal ? 1 : -1;\n            });\n        }\n        // Apply pagination\n        const page = filters.page || 1;\n        const perPage = filters.perPage || 10;\n        const startIndex = (page - 1) * perPage;\n        const endIndex = startIndex + perPage;\n        const paginatedItems = filteredItems.slice(startIndex, endIndex);\n        // Add relations\n        const itemsWithRelations = paginatedItems.map((item)=>({\n                ...item,\n                brand: mockBrands.find((b)=>b.id === item.brandId),\n                category: mockCategories.find((c)=>c.id === item.categoryId),\n                productType: mockProductTypes.find((pt)=>pt.id === item.productTypeId)\n            }));\n        return {\n            data: itemsWithRelations,\n            meta: {\n                current_page: page,\n                last_page: Math.ceil(filteredItems.length / perPage),\n                per_page: perPage,\n                total: filteredItems.length\n            }\n        };\n    },\n    async getById (id) {\n        await delay(300);\n        const item = mockInventoryItems.find((i)=>i.id === id);\n        if (!item) throw new Error('Inventory item not found');\n        return {\n            ...item,\n            brand: mockBrands.find((b)=>b.id === item.brandId),\n            category: mockCategories.find((c)=>c.id === item.categoryId),\n            productType: mockProductTypes.find((pt)=>pt.id === item.productTypeId)\n        };\n    },\n    async create (data) {\n        await delay(800);\n        const item = {\n            ...data,\n            id: Date.now().toString(),\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n        };\n        mockInventoryItems.push(item);\n        return item;\n    },\n    async update (id, data) {\n        await delay(800);\n        const index = mockInventoryItems.findIndex((i)=>i.id === id);\n        if (index === -1) throw new Error('Inventory item not found');\n        mockInventoryItems[index] = {\n            ...mockInventoryItems[index],\n            ...data,\n            updatedAt: new Date().toISOString()\n        };\n        return mockInventoryItems[index];\n    },\n    async delete (id) {\n        await delay(300);\n        const index = mockInventoryItems.findIndex((i)=>i.id === id);\n        if (index === -1) throw new Error('Inventory item not found');\n        mockInventoryItems.splice(index, 1);\n    }\n};\n// Jobs API for bulk operations\nconst jobsApi = {\n    async startImport (file, template) {\n        await delay(500);\n        const job = {\n            id: Date.now().toString(),\n            type: 'import',\n            status: 'pending',\n            progress: 0,\n            filename: file.name,\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n        };\n        mockJobs.push(job);\n        // Simulate job progress\n        setTimeout(()=>{\n            job.status = 'processing';\n            job.progress = 25;\n            job.totalRows = 100;\n            job.processedRows = 25;\n        }, 1000);\n        setTimeout(()=>{\n            job.status = 'completed';\n            job.progress = 100;\n            job.processedRows = 100;\n        }, 3000);\n        return job;\n    },\n    async startExport (filters, template) {\n        await delay(500);\n        const job = {\n            id: Date.now().toString(),\n            type: 'export',\n            status: 'pending',\n            progress: 0,\n            filename: \"inventory-export-\".concat(Date.now(), \".xlsx\"),\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n        };\n        mockJobs.push(job);\n        // Simulate job progress\n        setTimeout(()=>{\n            job.status = 'processing';\n            job.progress = 50;\n        }, 800);\n        setTimeout(()=>{\n            job.status = 'completed';\n            job.progress = 100;\n        }, 2000);\n        return job;\n    },\n    async getJob (id) {\n        await delay(200);\n        const job = mockJobs.find((j)=>j.id === id);\n        if (!job) throw new Error('Job not found');\n        return job;\n    },\n    async getAllJobs () {\n        await delay(300);\n        return [\n            ...mockJobs\n        ].sort((a, b)=>new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n    }\n};\n// Helper function to build category tree\nfunction buildCategoryTree(categories) {\n    const categoryMap = new Map();\n    const roots = [];\n    // Create map and initialize children arrays\n    categories.forEach((cat)=>{\n        categoryMap.set(cat.id, {\n            ...cat,\n            children: []\n        });\n    });\n    // Build tree structure\n    categories.forEach((cat)=>{\n        const category = categoryMap.get(cat.id);\n        if (cat.parentId) {\n            const parent = categoryMap.get(cat.parentId);\n            if (parent) {\n                parent.children.push(category);\n            }\n        } else {\n            roots.push(category);\n        }\n    });\n    return roots;\n}\n// Users & Roles API\nconst usersApi = {\n    async getAll () {\n        await delay(300);\n        return [\n            ...mockUsers\n        ];\n    },\n    async getById (id) {\n        await delay(300);\n        const user = mockUsers.find((u)=>u.id === id);\n        if (!user) throw new Error('User not found');\n        return user;\n    },\n    async create (data) {\n        await delay(500);\n        const user = {\n            ...data,\n            id: Date.now().toString(),\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n        };\n        mockUsers.push(user);\n        return user;\n    },\n    async update (id, data) {\n        await delay(500);\n        const index = mockUsers.findIndex((u)=>u.id === id);\n        if (index === -1) throw new Error('User not found');\n        mockUsers[index] = {\n            ...mockUsers[index],\n            ...data,\n            updatedAt: new Date().toISOString()\n        };\n        return mockUsers[index];\n    },\n    async delete (id) {\n        await delay(300);\n        const index = mockUsers.findIndex((u)=>u.id === id);\n        if (index === -1) throw new Error('User not found');\n        mockUsers.splice(index, 1);\n    }\n};\n// Roles API\nconst rolesApi = {\n    async getAll () {\n        await delay(300);\n        return [\n            ...mockRoles\n        ];\n    },\n    async getById (id) {\n        await delay(300);\n        const role = mockRoles.find((r)=>r.id === id);\n        if (!role) throw new Error('Role not found');\n        return role;\n    },\n    async create (data) {\n        await delay(500);\n        const role = {\n            ...data,\n            id: Date.now().toString(),\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n        };\n        mockRoles.push(role);\n        return role;\n    },\n    async update (id, data) {\n        await delay(500);\n        const index = mockRoles.findIndex((r)=>r.id === id);\n        if (index === -1) throw new Error('Role not found');\n        mockRoles[index] = {\n            ...mockRoles[index],\n            ...data,\n            updatedAt: new Date().toISOString()\n        };\n        return mockRoles[index];\n    },\n    async delete (id) {\n        await delay(300);\n        const index = mockRoles.findIndex((r)=>r.id === id);\n        if (index === -1) throw new Error('Role not found');\n        if (mockRoles[index].isSystem) throw new Error('Cannot delete system role');\n        mockRoles.splice(index, 1);\n    }\n};\n// Permissions API\nconst permissionsApi = {\n    async getAll () {\n        await delay(300);\n        return [\n            ...mockPermissions\n        ];\n    }\n};\n// Batches API\nconst batchesApi = {\n    async getAll () {\n        let filters = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        await delay(500);\n        let filteredBatches = [\n            ...mockBatches\n        ];\n        // Apply search filter\n        if (filters.search) {\n            const search = filters.search.toLowerCase();\n            filteredBatches = filteredBatches.filter((batch)=>batch.containerNumber.toLowerCase().includes(search) || batch.notes && batch.notes.toLowerCase().includes(search));\n        }\n        // Apply sorting\n        if (filters.sortBy) {\n            filteredBatches.sort((a, b)=>{\n                const aVal = a[filters.sortBy];\n                const bVal = b[filters.sortBy];\n                if (filters.sortOrder === 'desc') {\n                    return bVal > aVal ? 1 : -1;\n                }\n                return aVal > bVal ? 1 : -1;\n            });\n        }\n        // Apply pagination\n        const page = filters.page || 1;\n        const perPage = filters.perPage || 10;\n        const startIndex = (page - 1) * perPage;\n        const endIndex = startIndex + perPage;\n        const paginatedBatches = filteredBatches.slice(startIndex, endIndex);\n        return {\n            data: paginatedBatches,\n            meta: {\n                current_page: page,\n                last_page: Math.ceil(filteredBatches.length / perPage),\n                per_page: perPage,\n                total: filteredBatches.length\n            }\n        };\n    },\n    async getById (id) {\n        await delay(300);\n        const batch = mockBatches.find((b)=>b.id === id);\n        if (!batch) throw new Error('Batch not found');\n        // Add batch items\n        const items = mockBatchItems.filter((item)=>item.batchId === id).map((item)=>({\n                ...item,\n                inventoryItem: mockInventoryItems.find((inv)=>inv.id === item.inventoryItemId)\n            }));\n        return {\n            ...batch,\n            items\n        };\n    },\n    async create (data) {\n        await delay(800);\n        const batch = {\n            ...data,\n            id: Date.now().toString(),\n            totalValue: 0,\n            itemsCount: 0,\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n        };\n        mockBatches.push(batch);\n        return batch;\n    },\n    async update (id, data) {\n        await delay(800);\n        const index = mockBatches.findIndex((b)=>b.id === id);\n        if (index === -1) throw new Error('Batch not found');\n        mockBatches[index] = {\n            ...mockBatches[index],\n            ...data,\n            updatedAt: new Date().toISOString()\n        };\n        return mockBatches[index];\n    },\n    async delete (id) {\n        await delay(300);\n        const index = mockBatches.findIndex((b)=>b.id === id);\n        if (index === -1) throw new Error('Batch not found');\n        mockBatches.splice(index, 1);\n        // Remove associated batch items\n        const itemIndices = mockBatchItems.map((item, idx)=>item.batchId === id ? idx : -1).filter((idx)=>idx !== -1);\n        itemIndices.reverse().forEach((idx)=>mockBatchItems.splice(idx, 1));\n    }\n};\n// Batch Items API\nconst batchItemsApi = {\n    async getByBatchId (batchId) {\n        await delay(300);\n        return mockBatchItems.filter((item)=>item.batchId === batchId).map((item)=>({\n                ...item,\n                inventoryItem: mockInventoryItems.find((inv)=>inv.id === item.inventoryItemId)\n            }));\n    },\n    async create (data) {\n        await delay(500);\n        // Calculate SGD cost\n        const currency = mockCurrencies.find((c)=>c.code === data.currency);\n        const sgdCost = currency ? data.cost / currency.rate : data.cost;\n        const item = {\n            ...data,\n            id: Date.now().toString(),\n            sgdCost,\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n        };\n        mockBatchItems.push(item);\n        // Update batch totals\n        const batch = mockBatches.find((b)=>b.id === data.batchId);\n        if (batch) {\n            const batchItems = mockBatchItems.filter((bi)=>bi.batchId === data.batchId);\n            batch.totalValue = batchItems.reduce((sum, bi)=>sum + bi.sgdCost * bi.quantity, 0);\n            batch.itemsCount = batchItems.reduce((sum, bi)=>sum + bi.quantity, 0);\n        }\n        return item;\n    },\n    async update (id, data) {\n        await delay(500);\n        const index = mockBatchItems.findIndex((item)=>item.id === id);\n        if (index === -1) throw new Error('Batch item not found');\n        const updatedData = {\n            ...mockBatchItems[index],\n            ...data\n        };\n        // Recalculate SGD cost if currency or cost changed\n        if (data.currency || data.cost) {\n            const currency = mockCurrencies.find((c)=>c.code === updatedData.currency);\n            updatedData.sgdCost = currency ? updatedData.cost / currency.rate : updatedData.cost;\n        }\n        mockBatchItems[index] = {\n            ...updatedData,\n            updatedAt: new Date().toISOString()\n        };\n        // Update batch totals\n        const batch = mockBatches.find((b)=>b.id === mockBatchItems[index].batchId);\n        if (batch) {\n            const batchItems = mockBatchItems.filter((bi)=>bi.batchId === batch.id);\n            batch.totalValue = batchItems.reduce((sum, bi)=>sum + bi.sgdCost * bi.quantity, 0);\n            batch.itemsCount = batchItems.reduce((sum, bi)=>sum + bi.quantity, 0);\n        }\n        return mockBatchItems[index];\n    },\n    async delete (id) {\n        await delay(300);\n        const index = mockBatchItems.findIndex((item)=>item.id === id);\n        if (index === -1) throw new Error('Batch item not found');\n        const batchId = mockBatchItems[index].batchId;\n        mockBatchItems.splice(index, 1);\n        // Update batch totals\n        const batch = mockBatches.find((b)=>b.id === batchId);\n        if (batch) {\n            const batchItems = mockBatchItems.filter((bi)=>bi.batchId === batchId);\n            batch.totalValue = batchItems.reduce((sum, bi)=>sum + bi.sgdCost * bi.quantity, 0);\n            batch.itemsCount = batchItems.reduce((sum, bi)=>sum + bi.quantity, 0);\n        }\n    }\n};\n// Currencies API\nconst currenciesApi = {\n    async getAll () {\n        await delay(200);\n        return [\n            ...mockCurrencies\n        ];\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./services/api.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./validation/schemas.ts":
/*!*******************************!*\
  !*** ./validation/schemas.ts ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   batchItemSchema: () => (/* binding */ batchItemSchema),\n/* harmony export */   batchSchema: () => (/* binding */ batchSchema),\n/* harmony export */   brandSchema: () => (/* binding */ brandSchema),\n/* harmony export */   categorySchema: () => (/* binding */ categorySchema),\n/* harmony export */   forgotPasswordSchema: () => (/* binding */ forgotPasswordSchema),\n/* harmony export */   inventoryItemSchema: () => (/* binding */ inventoryItemSchema),\n/* harmony export */   loginSchema: () => (/* binding */ loginSchema),\n/* harmony export */   productTypeSchema: () => (/* binding */ productTypeSchema),\n/* harmony export */   registerSchema: () => (/* binding */ registerSchema),\n/* harmony export */   roleSchema: () => (/* binding */ roleSchema),\n/* harmony export */   userSchema: () => (/* binding */ userSchema)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(app-pages-browser)/./node_modules/zod/v4/classic/external.js\");\n\n// Auth schemas\nconst loginSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    email: zod__WEBPACK_IMPORTED_MODULE_0__.string().email('Invalid email address'),\n    password: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(6, 'Password must be at least 6 characters')\n});\nconst registerSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'Name must be at least 2 characters'),\n    email: zod__WEBPACK_IMPORTED_MODULE_0__.string().email('Invalid email address'),\n    password: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(6, 'Password must be at least 6 characters'),\n    confirmPassword: zod__WEBPACK_IMPORTED_MODULE_0__.string()\n}).refine((data)=>data.password === data.confirmPassword, {\n    message: 'Passwords do not match',\n    path: [\n        'confirmPassword'\n    ]\n});\nconst forgotPasswordSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    email: zod__WEBPACK_IMPORTED_MODULE_0__.string().email('Invalid email address')\n});\n// Brand schema\nconst brandSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'Brand name must be at least 2 characters'),\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    image: zod__WEBPACK_IMPORTED_MODULE_0__.string().url('Invalid image URL').optional().or(zod__WEBPACK_IMPORTED_MODULE_0__.literal(''))\n});\n// Category schema\nconst categorySchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'Category name must be at least 2 characters'),\n    parentId: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n});\n// Product Type schema\nconst productTypeSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'Product type name must be at least 2 characters'),\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    attributes: zod__WEBPACK_IMPORTED_MODULE_0__.record(zod__WEBPACK_IMPORTED_MODULE_0__.string(), zod__WEBPACK_IMPORTED_MODULE_0__.any()).default({})\n});\n// Inventory Item schema\nconst inventoryItemSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    sku: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(3, 'SKU must be at least 3 characters'),\n    quantity: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0, 'Quantity cannot be negative'),\n    cost: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0, 'Cost cannot be negative'),\n    retailPrice: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0, 'Retail price cannot be negative'),\n    orientalPrice: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0, 'Oriental price cannot be negative'),\n    brandId: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(1, 'Brand is required'),\n    categoryId: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(1, 'Category is required'),\n    productTypeId: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(1, 'Product type is required'),\n    warehouse: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'Warehouse must be at least 2 characters'),\n    weight: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0).optional(),\n    dimensions: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        length: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0),\n        width: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0),\n        height: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0)\n    }).optional(),\n    courier: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    assembly: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().default(false),\n    dynamicFeatures: zod__WEBPACK_IMPORTED_MODULE_0__.record(zod__WEBPACK_IMPORTED_MODULE_0__.string(), zod__WEBPACK_IMPORTED_MODULE_0__.any()).default({})\n});\n// User schema\nconst userSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'Name must be at least 2 characters'),\n    email: zod__WEBPACK_IMPORTED_MODULE_0__.string().email('Invalid email address'),\n    phone: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    avatar: zod__WEBPACK_IMPORTED_MODULE_0__.string().url('Invalid avatar URL').optional().or(zod__WEBPACK_IMPORTED_MODULE_0__.literal(''))\n});\n// Role schema\nconst roleSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(2, 'Role name must be at least 2 characters'),\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    permissions: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()).min(1, 'At least one permission is required')\n});\n// Batch schema\nconst batchSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    containerNumber: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(3, 'Container number must be at least 3 characters'),\n    eta: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(1, 'ETA is required'),\n    arrivalDate: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    status: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        'pending',\n        'in_transit',\n        'arrived',\n        'processing',\n        'completed',\n        'cancelled'\n    ]),\n    notes: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n});\n// Batch Item schema\nconst batchItemSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    inventoryItemId: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(1, 'Inventory item is required'),\n    quantity: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(1, 'Quantity must be at least 1'),\n    cost: zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0, 'Cost cannot be negative'),\n    currency: zod__WEBPACK_IMPORTED_MODULE_0__.string().min(3, 'Currency is required')\n});\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./validation/schemas.ts\n"));

/***/ })

});